From 53c17cff6246bb2547dd0e0832747c385bb6fd90 Mon Sep 17 00:00:00 2001
From: David Hoyt <dhoyt@hoytsoft.org>
Date: Tue, 8 Mar 2011 12:44:37 -0800
Subject: [PATCH] Fixes for compatibility with msys environments

---
 jhbuild/commands/sanitycheck.py |   43 +++++++++++++++--------
 jhbuild/moduleset.py            |    7 +++-
 jhbuild/utils/Makefile.am       |    1 +
 jhbuild/utils/env.py            |   73 +++++++++++++++++++++++++++++++++++++++
 jhbuild/utils/httpcache.py      |    7 ++--
 5 files changed, 112 insertions(+), 19 deletions(-)
 create mode 100644 jhbuild/utils/env.py

diff --git a/jhbuild/commands/sanitycheck.py b/jhbuild/commands/sanitycheck.py
index a03bf0e..1ebecfc 100644
--- a/jhbuild/commands/sanitycheck.py
+++ b/jhbuild/commands/sanitycheck.py
@@ -23,11 +23,13 @@ import re
 
 from jhbuild.commands import Command, register_command
 from jhbuild.utils.cmds import get_output, check_version
+from jhbuild.utils.env import is_msys, resolve_path_for_env
 from jhbuild.errors import UsageError, FatalError
-
+    
 def get_aclocal_path(version):
     data = get_output(['aclocal-%s' % version, '--print-ac-dir'])
     path = [data[:-1]]
+    path[0] = resolve_path_for_env(path[0])
     env = os.environ.get('ACLOCAL', '').split()
     i = 1
     while i < len(env):
@@ -71,7 +73,7 @@ class cmd_sanitycheck(Command):
                              r'libtoolize \([^)]*\) ([\d.]+)', '1.5'):
             uprint(_('%s not found') % 'libtool >= 1.5')
         if not check_version(['gettext', '--version'],
-                             r'gettext \([^)]*\) ([\d.]+)', '0.10.40'):
+                             r'gettext.*\([^)]*\) ([\d.]+)', '0.10.40'):
             uprint(_('%s not found') % 'gettext >= 0.10.40')
         if not check_version(['pkg-config', '--version'],
                              r'^([\d.]+)', '0.14.0'):
@@ -105,24 +107,35 @@ class cmd_sanitycheck(Command):
                      % (', '.join(not_in_path), ', '.join(path))))
 
         # XML catalog sanity checks
-        if not os.access('/etc/xml/catalog', os.R_OK):
-            uprint(_('Could not find XML catalog'))
-        else:
-            for (item, name) in [('-//OASIS//DTD DocBook XML V4.1.2//EN',
-                                  'DocBook XML DTD V4.1.2'),
-                                 ('http://docbook.sourceforge.net/release/xsl/current/html/chunk.xsl',
-                                  'DocBook XSL Stylesheets')]:
-                try:
-                    data = get_output(['xmlcatalog', '/etc/xml/catalog', item])
-                except:
-                    uprint(_('Could not find %s in XML catalog') % name            )
-
-        # Perl modules used by tools such as intltool:
-        for perlmod in [ 'XML::Parser' ]:
+        if not is_msys():
+            if not os.access('/etc/xml/catalog', os.R_OK):
+                uprint(_('Could not find XML catalog'))
+            else:
+                for (item, name) in [('-//OASIS//DTD DocBook XML V4.1.2//EN',
+                                      'DocBook XML DTD V4.1.2'),
+                                     ('http://docbook.sourceforge.net/release/xsl/current/html/chunk.xsl',
+                                      'DocBook XSL Stylesheets')]:
+                    try:
+                        data = get_output(['xmlcatalog', '/etc/xml/catalog', item])
+                    except:
+                        uprint(_('Could not find %s in XML catalog') % name            )
+
+        # Perl modules
+        for perlmod in [ ]:
             try:
                 get_output(['perl', '-M%s' % perlmod, '-e', 'exit'])
             except:
                 uprint(_('Could not find the perl module %s') % perlmod)
+        
+        # Perl modules used by intltool:
+        intltool_perl = 'perl'
+        if os.environ['INTLTOOL_PERL']:
+            intltool_perl = os.environ['INTLTOOL_PERL']
+        for perlmod in [ 'XML::Parser' ]:
+            try:
+                get_output([intltool_perl, '-M%s' % perlmod, '-e', 'exit'])
+            except:
+                uprint(_('Could not find the perl module %s used by intltool') % perlmod)
                 
         # check for cvs:
         if not inpath('cvs', os.environ['PATH'].split(os.pathsep)):
diff --git a/jhbuild/moduleset.py b/jhbuild/moduleset.py
index 3389713..05717a7 100644
--- a/jhbuild/moduleset.py
+++ b/jhbuild/moduleset.py
@@ -35,6 +35,7 @@ from jhbuild import modtypes
 from jhbuild.versioncontrol import get_repo_type
 from jhbuild.utils import httpcache
 from jhbuild.utils.cmds import get_output
+from jhbuild.utils.env import is_absolute_windows_path
 from jhbuild.modtypes.testmodule import TestModule
 
 __all__ = ['load', 'load_tests']
@@ -382,7 +383,11 @@ def _parse_module_set(config, uri):
     for node in _child_elements(document.documentElement):
         if node.nodeName == 'include':
             href = node.getAttribute('href')
-            inc_uri = urlparse.urljoin(uri, href)
+            if is_absolute_windows_path(uri):
+                # On Windows, path like c:... are local
+                inc_uri = os.path.abspath(os.path.join(os.path.dirname(uri), href))
+            else:
+			    inc_uri = urlparse.urljoin(uri, href)
             try:
                 inc_moduleset = _parse_module_set(config, inc_uri)
             except FatalError, e:
diff --git a/jhbuild/utils/Makefile.am b/jhbuild/utils/Makefile.am
index b6d63bf..855a304 100644
--- a/jhbuild/utils/Makefile.am
+++ b/jhbuild/utils/Makefile.am
@@ -3,6 +3,7 @@ appdir = $(pythondir)/jhbuild/utils/
 app_PYTHON = \
 	__init__.py \
 	cmds.py \
+	env.py \
 	httpcache.py \
 	notify.py \
 	packagedb.py \
diff --git a/jhbuild/utils/env.py b/jhbuild/utils/env.py
new file mode 100644
index 0000000..b4b780c
--- /dev/null
+++ b/jhbuild/utils/env.py
@@ -0,0 +1,73 @@
+# jhbuild - a build script for GNOME 1.x and 2.x
+# Copyright (C) 2011 David Hoyt
+#
+#   env.py: utilities for examining the build environment
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+
+import os
+import sys
+import threading
+
+from jhbuild.utils.cmds import get_output
+
+msys_env = False
+msys_env_verified = False
+msys_env_lock = threading.RLock()
+
+def is_windows():
+    return sys.platform.startswith('win')
+
+def in_path(filename, path):
+    for dir in path:
+        if os.path.isfile(os.path.join(dir, filename)):
+            return True
+        # also check for filename.exe on Windows
+        if is_windows() and os.path.isfile(os.path.join(dir, filename + '.exe')):
+            return True
+    return False
+	
+def is_in_path(app):
+    return in_path(app, os.environ['PATH'].split(os.pathsep))
+
+def is_msys():
+    global msys_env
+    global msys_env_lock
+    global msys_env_verified
+    
+    msys_env_lock.acquire()
+    try:
+        if msys_env_verified:
+            return msys_env
+        msys_env_verified = True
+        msys_env = is_windows() and is_in_path('msys-1.0.dll')
+        return msys_env
+    finally:
+        msys_env_lock.release()
+
+def full_win_path_from_msys_path(path):
+    if not is_msys() or not is_in_path('sh'):
+        return path
+    data = get_output(['sh', '-c', 'cd \"%s\" && pwd -W' % path])
+    path = [data[:-1]]
+    return path[0]
+
+def resolve_path_for_env(path):
+    # Determines if we're running in an msys env and if so, it translates 
+    # msys paths (e.g. /msys/file.txt to Windows paths (e.g. C:\msys\file.txt).
+    return full_win_path_from_msys_path(path)
+
+def is_absolute_windows_path(path):
+    return is_windows() and path[1] == ':'
diff --git a/jhbuild/utils/httpcache.py b/jhbuild/utils/httpcache.py
index 17a6fb7..5603fe1 100644
--- a/jhbuild/utils/httpcache.py
+++ b/jhbuild/utils/httpcache.py
@@ -35,6 +35,7 @@ import urlparse
 import time
 import rfc822
 import StringIO
+from jhbuild.utils.env import is_absolute_windows_path
 try:
     import gzip
 except ImportError:
@@ -165,11 +166,11 @@ class Cache:
         file name for contents.'''
         # pass file URIs straight through -- no need to cache them
         parts = urlparse.urlparse(uri)
-        if parts[0] in ('', 'file'):
-            return parts[2]
-        if sys.platform.startswith('win') and uri[1] == ':':
+        if is_absolute_windows_path(uri):
             # On Windows, path like c:... are local
             return uri
+        if parts[0] in ('', 'file'):
+            return parts[2]
 
         now = time.time()
 
-- 
1.7.4.msysgit.0

