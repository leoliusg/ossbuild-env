--- jhbuild/commands/sanitycheck-orig.py	Fri Mar  4 15:33:57 2011
+++ jhbuild/commands/sanitycheck.py	Fri Mar  4 15:35:52 2011
@@ -25,9 +25,28 @@
 from jhbuild.utils.cmds import get_output, check_version
 from jhbuild.errors import UsageError, FatalError
 
+def is_in_path(app):
+    return inpath(app, os.environ['PATH'].split(os.pathsep))
+
+def is_msys():
+    return is_in_path('msysinfo')
+
+def is_msys_from_path(path):
+    return path.startswith('/msys/') or path.startswith('/mingw/')
+
+def full_win_path_from_msys_path(path):
+    if not is_in_path('sh'):
+        return path
+    data = get_output(['sh', '-c', 'cd \"%s\" && pwd -W' % path])
+    path = [data[:-1]]
+    return path[0]
+    
 def get_aclocal_path(version):
     data = get_output(['aclocal-%s' % version, '--print-ac-dir'])
     path = [data[:-1]]
+    #If we're using msys, then get the full Windows-style path
+    if is_msys():
+        path[0] = full_win_path_from_msys_path(path[0])
     env = os.environ.get('ACLOCAL', '').split()
     i = 1
     while i < len(env):
@@ -71,7 +90,7 @@
                              r'libtoolize \([^)]*\) ([\d.]+)', '1.5'):
             uprint(_('%s not found') % 'libtool >= 1.5')
         if not check_version(['gettext', '--version'],
-                             r'gettext \([^)]*\) ([\d.]+)', '0.10.40'):
+                             r'gettext.*\([^)]*\) ([\d.]+)', '0.10.40'):
             uprint(_('%s not found') % 'gettext >= 0.10.40')
         if not check_version(['pkg-config', '--version'],
                              r'^([\d.]+)', '0.14.0'):
@@ -105,24 +124,35 @@
                      % (', '.join(not_in_path), ', '.join(path))))
 
         # XML catalog sanity checks
-        if not os.access('/etc/xml/catalog', os.R_OK):
-            uprint(_('Could not find XML catalog'))
-        else:
-            for (item, name) in [('-//OASIS//DTD DocBook XML V4.1.2//EN',
-                                  'DocBook XML DTD V4.1.2'),
-                                 ('http://docbook.sourceforge.net/release/xsl/current/html/chunk.xsl',
-                                  'DocBook XSL Stylesheets')]:
-                try:
-                    data = get_output(['xmlcatalog', '/etc/xml/catalog', item])
-                except:
-                    uprint(_('Could not find %s in XML catalog') % name            )
+        if not is_msys():
+            if not os.access('/etc/xml/catalog', os.R_OK):
+                uprint(_('Could not find XML catalog'))
+            else:
+                for (item, name) in [('-//OASIS//DTD DocBook XML V4.1.2//EN',
+                                      'DocBook XML DTD V4.1.2'),
+                                     ('http://docbook.sourceforge.net/release/xsl/current/html/chunk.xsl',
+                                      'DocBook XSL Stylesheets')]:
+                    try:
+                        data = get_output(['xmlcatalog', '/etc/xml/catalog', item])
+                    except:
+                        uprint(_('Could not find %s in XML catalog') % name            )
 
-        # Perl modules used by tools such as intltool:
-        for perlmod in [ 'XML::Parser' ]:
+        # Perl modules
+        for perlmod in [ ]:
             try:
                 get_output(['perl', '-M%s' % perlmod, '-e', 'exit'])
             except:
                 uprint(_('Could not find the perl module %s') % perlmod)
+        
+        # Perl modules used by intltool:
+        intltool_perl = 'perl'
+        if os.environ['INTLTOOL_PERL']:
+            intltool_perl = os.environ['INTLTOOL_PERL']
+        for perlmod in [ 'XML::Parser' ]:
+            try:
+                get_output([intltool_perl, '-M%s' % perlmod, '-e', 'exit'])
+            except:
+                uprint(_('Could not find the perl module %s used by intltool') % perlmod)
                 
         # check for cvs:
         if not inpath('cvs', os.environ['PATH'].split(os.pathsep)):
